#BlueJ class context
comment0.target=Optimierungsalgorithmus
comment0.text=\r\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ Optimierungsalgorithmus.\r\n\ \r\n\ Diese\ Klasse\ Optimierungsalgorithmus\ ist\ daf\u00FCr\ zust\u00E4ndig\ die\ Ausstellungen\ zu\ planen.\r\n\ Daf\u00FCr\ m\u00FCssen\ die\ Kunstgegenst\u00E4nden\ mit\ allen\ vorgegebenen\ Bedingungen\ in\ den\ R\u00E4umen\ verteilt\ werden.\r\n\ Dabei\ m\u00FCssen\ die\ Ma\u00DFe\ der\ R\u00E4ume\ und\ der\ Kunstgegenst\u00E4nde\ ber\u00FCcksichtigt\ werden\ sowie\ die\ Themen.\r\n\ \r\n\ Alle\ Constraints/Bedindungen\:\r\n\ Thema\ das\ mindestens\ in\ 50%\ der\ R\u00E4umen\ vertreten\ ist\r\n\ H\u00F6chstens\ 3\ Themen\ pro\ Raum\r\n\ Kostenobergrenze\r\n\ Bild\ muss\ auf\ Wand\ passen\r\n\ Bilder\ 1m\ Abstand\ voneinander\r\n\ Kunstgegenst\u00E4nde\ 2m\ Abstand\ voneinander\r\n\ Kunstinstallationen\ stehen\ alleine\ in\ einem\ Raum\r\n\ @author\ Marcell\ Wach\r\n\ @version\ 1.0\r\n
comment1.params=
comment1.target=Optimierungsalgorithmus()
comment1.text=\r\n\ Konstruktor\ f\u00FCr\ Objekte\ der\ Klasse\ Optimierungsalgorithmus\r\n
comment2.params=parameterRaeume\ parameterKunstwerke\ parameterThema\ pKostengrenze
comment2.target=java.util.ArrayList\ optimiere2(java.util.ArrayList,\ java.util.ArrayList,\ java.lang.String,\ int)
comment2.text=\r\n\ Statische\ Methode\ die\ aus\ der\ Main\ aufgerufen\ wird.\r\n\ Die\ Methode\ deklariert\ und\ initialisiert\ wichtige\ Hilfsdatenstrukturen\ und\ starten\ anschlie\u00DFend\ den\ rekursiven\ Backtracking\ Algorithmus.\r\n\ \r\n\ @param\ \ \ parameterRaeume\ \ \ \ \ \ \ \ \ Eine\ Liste\ aller\ zur\ Verf\u00FCgung\ stehenden\ R\u00E4ume\r\n\ @param\ \ \ parameterKunstwerke\ \ \ \ \ Eine\ Liste\ aller\ Kunstwerke\ die\ f\u00FCr\ die\ n\u00E4chste\ Ausstellung\ zur\ Verf\u00FCgung\ stehen\r\n\ @param\ \ \ parameterThema\ \ \ \ \ \ \ \ \ \ Das\ Hauptthema\ der\ n\u00E4chsten\ Ausstellung\r\n\ @param\ \ \ pKostengrenze\ \ \ \ \ \ \ \ \ \ \ Das\ maximale\ Budget\ der\ n\u00E4chsten\ Ausstellung\r\n\ \r\n\ @return\ ArrayList<Kunstwerk>\ \ \ \ \ Die\ Liste\ mit\ den\ in\ der\ n\u00E4chsten\ Ausstellung\ benutzten\ Kunstwerke.\r\n
comment3.params=pAusstellung\ parameterKunstwerke\ pReturnList\ parameterThema\ pBesteLaenge\ pKostengrenze
comment3.target=java.util.ArrayList\ StarteOptimierung(java.util.HashMap,\ java.util.ArrayList,\ java.util.ArrayList,\ java.lang.String,\ int,\ int)
comment3.text=\r\n\ Rekursiver\ Backtracking\ Algorithmus\ der\ versucht\ die\ R\u00E4ume\ optimal\ unter\ Ber\u00FCcksichtigung\ aller\ vorgegebenen\ Bedingungen\ zu\ f\u00FCllen\r\n\ Die\ Methode\ ruft\ sich\ solange\ auf\ bis\ alle\ M\u00F6glichkeiten\ ausprobiert\ worden\ sind.\r\n\ Jedes\ Mal\ wenn\ eine\ neue\ Kombination\ gefunden\ wird,\ in\ der\ mehr\ Kunstwerke\ in\ den\ R\u00E4umen\ verteilt\ werden\ k\u00F6nnen\ als\ vorher,\ wird\ diese\ in\ einer\ globalen\ Variable\ zwischengespeichert.\r\n\ \r\n\ @param\ \ \ pAusstellung\ \ \ \ \ \ \ \ \ \ \ \ Hashmap\ die\ ausgibt\ welche\ Kunstwerke\ gerade\ in\ welchem\ Raum\ zu\ finden\ sind\r\n\ @param\ \ \ parameterKunstwerke\ \ \ \ \ ArrayList\ die\ alle\ Kunstwerke\ enth\u00E4lt\ die\ noch\ nicht\ verteilt\ wurden\r\n\ @param\ \ \ pReturnList\ \ \ \ \ \ \ \ \ \ \ \ \ ArrayList\ die\ alle\ Kunstwerke\ enth\u00E4lt\ die\ bereits\ verteilt\ worden\ sind\r\n\ @param\ \ \ parameterThema\ \ \ \ \ \ \ \ \ \ Das\ Hauptthema\ der\ Ausstellung\r\n\ @param\ \ \ BesteLaenge\ \ \ \ \ \ \ \ \ \ \ \ \ Die\ Anzahl\ der\ verteilten\ Kunstwerke\ im\ aktuellen\ Optimum\r\n\ @param\ \ \ pKostengrenze\ \ \ \ \ \ \ \ \ \ \ Die\ maximalen\ Kosten\ f\u00FCr\ die\ Ausstellung\r\n\ @return\ BesteKunstwerk\ \ \ \ \ \ \ \ \ \ \ Globale\ Variable\ die\ im\ Verlauf\ des\ Backtracking\ optimiert\ wird\r\n
comment4.params=pAusstellung\ pThema\ pKostengrenze
comment4.target=boolean\ BacktrackingReject(java.util.HashMap,\ java.lang.String,\ int)
comment4.text=\r\n\ Die\ Methode\ pr\u00FCft\ mehrere\ Bedingungen\ die\ wichtig\ sind\ um\ die\ Kunstwerke\ optimal\ zu\ verteilen.\r\n\ Es\ wird\ gepr\u00FCft\ ob\ das\ Hauptthema\ in\ mindestens\ 50%\ der\ R\u00E4umen\ als\ Mehrheit\ vertreten\ ist\r\n\ @param\ pAusstellung\ \ Alle\ R\u00E4ume\ mit\ ihren\ beinhalteten\ Kunstwerken\r\n\ @param\ pThema\ \ \ \ \ \ \ \ Das\ Hauptthema\ der\ Ausstellung\r\n\ @param\ pKostengrenze\ Das\ Budget\ f\u00FCr\ die\ Ausstellung\r\n\ @return\ boolean\ \ \ \ \ \ True,\ wenn\ alle\ Bedingungen\ weiterhin\ g\u00FCltig\ sind\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False,\ falls\ eine\ oder\ beide\ Bedingungen\ gebrochen\ wurden\r\n
comment5.params=pKunstwerk
comment5.target=java.util.ArrayList\ getThemenImRaum(java.util.ArrayList)
comment5.text=\r\n\ Die\ Methode\ soll\ zur\u00FCckgeben\ welche\ Themen\ bereits\ in\ einem\ Raum\ vertreten\ sind\r\n\ @param\ pKunstwerk\ \ \ \ Alle\ Kunstwerke\ aus\ einem\ Raum\r\n\ @return\ ReturnList\ \ \ Alle\ Themen\ des\ Raumes\ in\ einer\ Liste\ des\ Typs\ String\r\n
numComments=6
